package:
  name: maltpynt
  version: "{{ version }}"

source:
  fn: maltpynt-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/m/malypynt/maltpynt-{{ version }}.tar.gz
  md5: {{ md5 }}
#  patches:
   # List any patch files here
   # - fix.patch

build:
  script: python setup.py install --offline --single-version-externally-managed --record record.txt
  # noarch_python: True
  # preserve_egg_dir: True
  entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - maltpynt = maltpynt:main
    #
    # Would create an entry point called maltpynt that calls maltpynt.main()

    - MPreadevents = maltpynt.read_events:main
    - MPlcurve = maltpynt.lcurve:main
    - MPcalibrate = maltpynt.calibrate:main
    - MPcreategti = maltpynt.create_gti:main
    - MPdumpdyn = maltpynt.fspec:dumpdyn_main
    - MPfake = maltpynt.fake:main
    - MPexposure = maltpynt.exposure:main
    - MPfspec = maltpynt.fspec:main
    - MPlags = maltpynt.lags:main
    - MPplot = maltpynt.plot:main
    - MPreadfile = maltpynt.io:main
    - MPrebin = maltpynt.rebin:main
    - MPscrunchlc = maltpynt.lcurve:scrunch_main
    - MPsumfspec = maltpynt.sum_fspec:main
    - MP2xspec = maltpynt.save_as_xspec:main

  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - matplotlib
    - scipy
    - numpy
    - astropy

  run:
    - python
    - matplotlib
    - scipy
    - numpy
    - astropy

test:
  # Python imports
  imports:
    - maltpynt
    - maltpynt.tests

  commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.

    - MPreadevents --help
    - MPlcurve --help
    - MPcalibrate --help
    - MPcreategti --help
    - MPdumpdyn --help
    - MPfake --help
    - MPexposure --help
    - MPfspec --help
    - MPlags --help
    - MPplot --help
    - MPreadfile --help
    - MPrebin --help
    - MPscrunchlc --help
    - MPsumfspec --help
    - MP2xspec --help

  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: https://bitbucket.org/mbachett/maltpynt
  license: BSD
  summary: '"Matteos library and tools in Python for NuSTAR timing"'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
